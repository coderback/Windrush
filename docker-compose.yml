services:
  # PostgreSQL Database
  db:
    image: postgres:17-alpine
    container_name: windrush_db
    environment:
      POSTGRES_DB: windrush_db
      POSTGRES_USER: windrush_user
      POSTGRES_PASSWORD: windrush_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U windrush_user -d windrush_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - windrush_network

  # Redis for Caching and Sessions
  redis:
    image: redis:8-alpine
    container_name: windrush_redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - windrush_network

  # Django Backend
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: windrush_backend
    environment:
      - DEBUG=True
      - SECRET_KEY=your-development-secret-key
      - DB_NAME=windrush_db
      - DB_USER=windrush_user
      - DB_PASSWORD=windrush_password
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - FRONTEND_URL=http://localhost:3000
      - USE_S3=False
    ports:
      - "8000:8000"
    volumes:
      - ./src/backend:/app
      - backend_media:/app/media
      - backend_static:/app/staticfiles
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/health/', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - windrush_network
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "

  # Next.js Frontend
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: windrush_frontend
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_FRONTEND_URL=http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - windrush_network
    command: npm run dev

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: windrush_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
      - backend_static:/var/www/static:ro
      - backend_media:/var/www/media:ro
    depends_on:
      - backend
      - frontend
    networks:
      - windrush_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_media:
    driver: local
  backend_static:
    driver: local

networks:
  windrush_network:
    driver: bridge