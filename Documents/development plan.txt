Development Plan
Building Windrush is an ambitious project. We will adopt an agile, iterative development plan to deliver core value quickly and then incrementally enhance the platform. Below is a phased plan outlining how we’ll approach development, including major milestones for functional and technical components: Phase 1: MVP (Minimum Viable Product) – Core Job Board (Est. 3-4 months)
Goal: Launch a functional MVP focusing on the primary job search and application features for job seekers, with admin-curated job listings.
User Accounts & Profiles: Implement user registration, login, and basic profile creation. At MVP, profile might include just essential fields (education, skills, visa need) and the ability to upload one general CV to start. Ensure GDPR-compliant consent and email verification on signup.
Job Listings & Search: Set up the database with the Company and Job tables. Import an initial batch of known sponsor companies (possibly from the government list in CSV). Implement a basic interface for admins to create job entries (could be as simple as a database seeder or a rudimentary admin page). Develop the job search page for users with filter by keyword, location, and job type. (Visa sponsorship filter is implicitly on since most jobs in system qualify.) Use Postgres full-text search or simple filtering for now.
Job Details & Apply: Create a job detail page showing full description and a prominent “Apply” button. Build the application form: user can write a short cover note and attach a CV (for MVP, maybe use their one uploaded CV by default but allow attaching a different file if they want). On submission, create the Application record and send a confirmation email to the user. No complex status tracking yet – just mark application as submitted.
Speculative Application (MVP): As a stretch in MVP, allow the user to go to a Company page (list of sponsor companies) and click a “Send CV” button to send a speculative application. This will use the same Application table (job_id null). If time is short, this feature could be planned for Phase 2 instead, but including it in MVP would strongly demonstrate our niche value.
Basic AI/Matching (MVP): Implement a rudimentary recommendation on the user dashboard. For instance, after filling profile, show 5 “Suggested Jobs” by matching profile skills or keywords to job requirements (this can be done with a simple SQL query or in-memory match). It doesn’t need to be fancy initially – even rule-based suggestions (like if user’s field = IT, show latest IT jobs) to show the concept. The complex AI model training can wait for later, but we want to earmark this feature in UI to iterate on.
Frontend & UX: Develop the main pages: Home (with maybe a search bar and some featured jobs/companies), Job search results, Job detail, Profile page, and Application form workflow. Ensure it’s all responsive. Use a simple, clean UI design that we can polish later. Possibly brand with Windrush theme (maybe a logo reminiscent of travel or new beginnings).
Monetization (MVP): Not implemented in MVP; all features are free. We focus on user acquisition first. But we will design the database with premium flag and maybe stub out the ability to upgrade (without backend payment processing initially). Maybe just mention “Premium coming soon” in UI for some placeholder features.
Compliance & Policies: Draft Privacy Policy and Terms of Service to display on site (covering GDPR consent, etc.). Implement a cookie consent banner if using any tracking cookies.
Testing & Launch: Before launch, do testing with a small group (could be friendly users or within our team) to gather feedback and fix bugs. Ensure critical flows (signup, search, apply) work smoothly. Deploy the MVP to a production environment (e.g. AWS) with monitoring. The MVP launch will target perhaps a subset of universities or communities to get initial users.
Deliverable: A working platform where an international student can sign up, find a few curated sponsored jobs, and apply with their CV. Admins can load new jobs as needed. This MVP validates the concept and collects real usage data. Phase 2: Enhanced Matching and User Experience (Est. +2 months)
Goal: Improve the platform’s intelligence and user engagement features – make the job suggestions smarter, add notifications, and support multiple docs per user.
AI Recommendation Engine: Develop the recommendation algorithm further. Possibly implement a content-based filtering using similarity between user profile and job descriptions. This might involve parsing job descriptions to extract skills (we can use an NLP library or even simple keyword matching). We might train a simple model using whatever data we have (if enough jobs and test user profiles). Integrate this so that each user’s dashboard shows updated recommended jobs. We can also implement feedback loops (like a “Not interested” button on suggestions to gather preferences).
Notifications: Set up the notification system. Implement back-end logic to create notification entries when certain events happen: e.g. when a new job is posted that matches a user’s profile (this requires a background job or trigger to check new job vs user criteria), or when an admin changes an application status (in Phase 3 when employers can do it). Also notify admin when new user registers (for oversight), etc. Implement front-end to display notifications and possibly send out email alerts for important ones.
Multi-CV and Cover Letters: Extend the profile or application flow to allow storing and selecting multiple CVs and cover letters. For example, on the profile page, allow user to upload additional CV versions (with labels like “Software CV”, “Marketing CV”) and manage them. Then, on the job application form, provide an option to choose which CV and which cover letter file to attach, or upload a new one on the spot. This satisfies requirement #2 fully. We’ll also increase file storage as needed.
Application Tracking for Users: Allow users to see application statuses. We’ll introduce an initial mechanism for tracking status: even if employers are not yet updating statuses through the system, we can use a default status (“Submitted”) and allow the user to manually mark if they got a response outside the system (this is optional). Or better, integrate with email – e.g. if we require employers to BCC us on communications? That might be complex. Instead, maybe we hold off full tracking until Phase 3 when employers join. In Phase 2, we prepare the UI for status updates and possibly allow users to add notes like “Interview scheduled”. This engages users with the platform to manage their job hunt progress.
Polish UI and Add Features: Based on MVP feedback, improve the UX. E.g., add a bookmark job feature (save jobs) if users wanted it. Improve search capabilities (maybe add more filters like salary or company). Ensure the site looks professional – perhaps engage a UI designer for some components. Also, implement a contact form or help chat so users can reach out with issues (good for gathering feedback and support).
Scalability Improvements: If the user base is growing, ensure the infrastructure is ready. For example, move from a single server to load-balanced servers if not done. Set up a staging environment for testing new features. Optimize any slow queries observed from MVP usage (maybe add indexes or caching where needed). We might also set up the ElasticSearch service now if we see search performance dropping or want to add fuzzy search.
Security Enhancements: Implement 2FA option for accounts (maybe via an authenticator app or SMS, using a service like Twilio, though not critical initially). Also do a security review – e.g. ensure proper validations on all inputs, run some penetration testing tools.
Marketing Prep: Integrate basic analytics (Google Analytics) to track user flows. Also implement SEO improvements: e.g. ensure public job pages have proper meta tags and are indexable (Next.js SSR can help with that). Maybe add some initial content (blog posts) in the resource center to drive organic traffic.
Deliverable: A more refined product with personalized job recommendations and a richer feature set for job seekers. Users receive notifications of new opportunities; they can tailor each application with specific documents. The platform feels more “intelligent” and helpful, increasing user retention. Phase 3: Employer Portal & Self-Service (Est. +3 months)
Goal: Introduce functionality for employers to register, post jobs, and manage applicants on their own, reducing reliance on manual admin curation and scaling the job listings supply.
Employer Onboarding: Build the employer registration process. This includes a sign-up page for employers where they provide company details. We’ll implement verification steps: possibly require a corporate email domain (we send a verification link to ensure they belong to that company). Also, cross-check the company name against our Company database of sponsors – if there’s a match, link them; if not, either reject (if we only allow licensed sponsors) or flag for admin approval. Likely, we’ll allow only companies that are in our sponsor list to register (others can join waitlist or be evaluated).
Job Posting Interface: Create an interface for logged-in employers to add new job postings. This will be a form similar to what admins have used, but simplified. Include fields for all relevant info. We’ll enforce required fields (and maybe display tips like “remember, salary must meet visa minimum of X for this role” to guide compliance). When an employer posts a job, it goes into the Job table associated with their company. We might initially require admin moderation (job goes into pending status for admin to approve, to avoid spam or irrelevant posts) – at least until trust is built. Set up admin dashboard to approve/reject employer-posted jobs. Over time, we can loosen this if quality is good.
Applicant Management for Employers: Develop the employer dashboard to view jobs they’ve posted and applicants to those jobs. This involves listing applications and providing actions: view applicant profile/CV, mark status (shortlist, reject, etc.), send message or request interview. Implementing the status update is key here – when an employer changes an application’s status, the system updates the Application record and triggers a notification/email to the candidate. Also, employers should be able to download a list of applicants (maybe export to CSV) for their internal records. We should also ensure privacy – employers see only applicants to their jobs or speculative applications to their company, nothing else.
Speculative Applications Inbox: On the employer side, create a section where they can see all the unsolicited applications sent to their company (if any). This likely means querying Application where company_id = their company AND job_id is null. Present those with the cover letter and CV. They can then if interested message those candidates or invite them to formally apply to a new job. This turns the speculative pool into a potential talent pipeline for them.
Communication Tools: Implement an initial version of direct messaging between employer and candidate. Perhaps simplest is to allow the employer to send an email to candidate through the platform (we generate an email with a masked address or on behalf of employer). A more involved approach is an in-app chat interface. For now, an “Send Message” button that opens a text box and sends an email (with a copy stored as a message in our DB) is adequate. We should also allow candidates to reply. We can surface those replies either as email to employer or in the platform if logged in. A full real-time chat can be in Phase 4 if needed.
Premium Features Rollout: With employers active, consider introducing some premium options: e.g. limit free employer accounts to posting say 3 jobs; to post more or to feature jobs, require a paid plan. We can implement a simple payment flow using Stripe for employers to purchase a posting package or subscription. Similarly, for job seekers, if we haven’t already, we could start offering the premium subscriptions (perhaps as Beta). We must integrate Stripe (or another processor) at this stage to handle transactions securely. Ensure the UI clearly differentiates free vs premium features. Possibly release a “Premium Job Seeker” plan that unlocks those features built in Phase 2. This will start generating revenue, though initially maybe keep fees low to attract adoption.
Monitoring & Scale: With real user and employer activity, we will closely monitor system performance. Adding many jobs and users might require search optimization (likely time to introduce ElasticSearch now if not done). Also, more concurrent usage of chat/notifications might require deploying an instance of a WebSocket server or using a service like Pusher for simplicity. Ensure our database can handle more writes (applications) – maybe tune the Postgres config or move to a larger instance as needed. We’ll also implement daily backups for data safety.
Feedback and Iteration: After releasing the employer portal, we’ll gather feedback from initial companies. Perhaps start with a pilot group of known friendly employers (maybe ones we have relationships with) to test the process. Use their feedback to fix any pain points (e.g. maybe they want a way to bulk upload jobs, etc.). Also ensure the speculative app process works now that companies can respond – adjust if needed (maybe add a feature for employer to “Convert to Job Application” if they want to consider a speculative candidate for a specific job).
Deliverable: A self-service platform where companies (particularly licensed sponsors) can engage directly – posting jobs and managing candidates. This phase turns Windrush from a manually-curated board into a scalable two-sided platform. Successful completion means we have a growing list of jobs beyond what our team manually input, and more up-to-date application statuses as employers interact. Phase 4: Refinement, Scale, and Mobile (Est. +2-3 months)
Goal: Polish all aspects of the platform, ensure it scales towards tens of thousands of users, and expand accessibility (possibly via mobile apps or further features).
Mobile App (Optional): Depending on user feedback, we might start developing a dedicated mobile app (iOS/Android) to complement the web. Since the web is responsive, this may not be urgent, but a native app can offer push notifications more seamlessly and be more accessible to student users. We could leverage React Native to reuse some code, or Flutter as a cross-platform solution. However, if resources are limited, we might stick to improving the mobile web experience and use techniques like PWA (Progressive Web App) for push notifications.
Advanced Analytics & ML: Now that we have more data (applications, user behavior), we can refine our AI. Possibly build a more advanced recommendation model using collaborative filtering (e.g., “users similar to you applied to these jobs”), or even train an NLP model to score how well a CV matches a job description and surface high-match jobs. We might also introduce an AI-powered CV analyzer feature for users: e.g. an AI that reads their CV and suggests improvements or highlights missing skills compared to jobs they want – this could be a premium feature. On the employer side, an AI tool could rank incoming applicants or automatically screen (though that enters tricky territory – we’d implement carefully if at all).
New Features: Implement any backlog features that add value. For instance, perhaps a review system where candidates can review their experience with an employer and vice versa, to build trust (similar to Glassdoor or like how Uber drivers/passengers rate each other). This could help maintain quality (employers who ghost candidates might be given feedback, etc.). Another idea is integration with LinkedIn – allow users to import their profile data from LinkedIn to populate Windrush profile, saving time. Or integration with university career services (maybe share our listings via API to university job boards). These are optional but could differentiate us further.
Monetization Expansion: By now, if user base is >50k and growing, we’ll push monetization. Ramp up marketing for premium subscriptions. Possibly add a small fee for speculative applications beyond a monthly free quota (to discourage spamming and monetize heavy users, though carefully). For employers, actively market our platform’s benefits to more companies – perhaps tiered pricing for SMEs vs large companies. Implement invoicing or payment for employer subscriptions if not done.
Infrastructure Hardening: As we scale, move to more robust infrastructure: e.g., use Kubernetes to manage container scaling smoothly, implement a CDN for all assets and even dynamic content caching if possible. Use Cloudflare or AWS WAF to mitigate any DDoS attacks or misuse. Improve our logging/monitoring – possibly set up an ELK stack (ElasticSearch, Logstash, Kibana) to analyze logs for any anomalies. Also, ensure disaster recovery plan – e.g., automated failover for DB (multi-AZ), and run fire drills for simulated downtime to ensure the site can recover.
Legal/Compliance Check: With growth, re-evaluate compliance. Maybe do a DPIA (Data Protection Impact Assessment) for GDPR formally. Ensure cookie consents and privacy policies are up to date. Look into if we need to register with ICO (in UK, likely yes as processing personal data). Ensure all marketing emails follow CAN-SPAM, etc. Also consider any accessibility audit to ensure the platform is usable by all (public sector bodies have strict rules – not mandatory for private, but good practice). And verify that our handling of visa-related information remains accurate (for instance, if the government renames Tier 2 to “Skilled Worker”, our content should reflect that).
Community and Support: Possibly implement a support ticket system or FAQ knowledge base in the app to handle user queries. Also consider building a community forum or Q&A where users can help each other (like discussing visa interview experiences, etc.) – this can increase engagement and time on platform.
Deliverable: A mature platform ready for large scale, with robust features and a plan for continued growth. By end of Phase 4, Windrush should be feature-complete with all originally envisioned capabilities and several improvements from user feedback. The system should comfortably handle 50k+ users and be in a good position to scale to 100k or more with minimal changes (just adding hardware). Finally, throughout all phases, we will use agile sprints (likely 2-week sprints) to plan, develop, and review features. Continuous deployment will ensure any critical fixes or improvements can go live quickly. We’ll engage our user base – e.g., through feedback surveys or by analyzing usage metrics – to prioritize the most needed features at each step. This iterative approach reduces risk and ensures we’re always aligned with user needs.